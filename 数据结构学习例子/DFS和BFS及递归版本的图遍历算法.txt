#include <iostream>
#include "MatrixGraph.h"

using namespace std;
using namespace MyLib;


// 递归版本的深度优先遍历
template <typename V, typename E>
void DFS(Graph<V, E>& g, int v, Array<bool>& visited)
{
    if((0 <= v) && (v < g.vertexCount()))
    {
        cout << v << endl;

        visited[v] = true;

        SharedPointer<Array<int>> aj = g.getAdjacent(v);

        for(int i=0; i<aj->length(); i++)
        {
            if(!visited[(*aj)[i]])
            {
                DFS(g, (*aj)[i], visited);
            }
        }
    }
    else
    {
        THROW_EXCEPTION(InvalidParameterException, "index v is invalid...");
    }
}

template <typename V, typename E>
void DFS(Graph<V, E>& g, int v)
{
    DynamicArray<bool> visited(g.vertexCount());

    for(int i=0; i<visited.length(); i++)
    {
        visited[i] = false;
    }

    DFS(g, v, visited);
}

int main()
{

    MartixGraph<9, char, int> g;
    const char* VD = "ABEDCGFHI";

    for(int i=0; i<9; i++)
    {
        g.setVertex(0, VD[i]);
    }

    g.setEdge(0, 1, 0);
    g.setEdge(1, 0, 0);

    g.setEdge(0, 3, 0);
    g.setEdge(3, 0, 0);

    g.setEdge(0, 4, 0);
    g.setEdge(4, 0, 0);

    g.setEdge(1, 2, 0);
    g.setEdge(2, 1, 0);

    g.setEdge(1, 4, 0);
    g.setEdge(4, 1, 0);

    g.setEdge(2, 5, 0);
    g.setEdge(5, 2, 0);

    g.setEdge(3, 6, 0);
    g.setEdge(6, 3, 0);

    g.setEdge(4, 6, 0);
    g.setEdge(6, 4, 0);

    g.setEdge(6, 7, 0);
    g.setEdge(7, 6, 0);

    g.setEdge(7, 8, 0);
    g.setEdge(8, 7, 0);

    SharedPointer< Array<int> > sa = g.DFS(0);

    for(int i=0; i<sa->length(); i++)
    {
        cout << (*sa)[i] << " ";
    }

    cout << endl;

    DFS(g, 0);

    cout << endl;

    return 0;
}
