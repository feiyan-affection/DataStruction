#include <iostream>
#include <string>
#include "SmartPointer.h"
#include "Exception.h"
#include "Object.h"
#include "List.h"
#include "SeqList.h"
#include "StaticList.h"
#include "DynamicList.h"
#include "StaticArray.h"
#include "DynamicArray.h"
#include "LinkList.h"
#include "StaticLinkList.h"
#include "SharedPointer.h"
#include "CircleList.h"
#include "DualLinkList.h"
#include "DualStaticLinkList.h"
// #include "DualCircleList.h"
#include "StaticStack.h"
#include "LinkStack.h"
#include "StaticQueue.h"
#include "LinkQueue.h"

using namespace std;
using namespace MyLib;


template <typename T>
class QueueToStack : public Stack<T>
{
protected:
    LinkQueue<T> m_queue_1;
    LinkQueue<T> m_queue_2;
    LinkQueue<T>* m_pIn;
    LinkQueue<T>* m_pOut;

    void move() const     // 将 进队列 中的前n-1个元素移动到 出队列 中
    {
        int n = m_pIn->length() - 1;

        for(int i=0; i<n; i++)
        {
            m_pOut->add(m_pIn->front());
            m_pIn->remove();
        }
    }

    // 将两个队列交换
    void Swap()
    {
        LinkQueue<T>* temp = NULL;

        temp = m_pIn;
        m_pIn = m_pOut;
        m_pOut = temp;
    }
public:
    QueueToStack()
    {
        m_pIn = &m_queue_1;
        m_pOut = &m_queue_2;
    }

    void push(const T &e)
   {
        m_pIn->add(e);
    }

    void pop()
    {
        if(m_pIn->length() > 0)
        {
            move();

            m_pIn->remove();

            Swap();
        }
        else
        {
            THROW_EXCEPTION(InvalidOperationException, "no element in current queue...");
        }
    }

    T top() const
    {
        if(m_pIn->length() > 0)
        {
            move();

            return m_pIn->front();
        }
        else
        {
            THROW_EXCEPTION(InvalidOperationException, "no element in current queue...");
        }
    }


    void clear()
    {
        m_queue_1.clear();
        m_queue_2.clear();
    }

    int size() const
    {
        return m_queue_1.length() + m_queue_2.length();
    }
};

int main()
{
    QueueToStack<int> qs;

    for(int i=0; i<10; i++)
    {
        qs.push(i);
    }

    while(qs.size() > 0)
    {
        cout << qs.top() << endl;

        qs.pop();
    }

    return 0;
}
